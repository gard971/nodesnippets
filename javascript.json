{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	"NodeBase":{
		"prefix":["NodeBase"],
		"body" :["//config", "var port = 3000", "//dependencies", "const app = require('express')()", "const express = require('express')", "const http = require('http').createServer(app).listen(port, () => {console.log(`server listening on port: \\${port}`)})", "const fs = require('fs')", "const path = require('path')", "const io = require('socket.io')(http)", "", "app.use(express.static(path.join(__dirname + '/public')))","", "io.on('connection', socket => {});\n function jsonRead(file) {\n    var data = fs.readFileSync(file, \"utf-8\")\n    return JSON.parse(data)\n}\n\nfunction jsonWrite(file, data) {\n    fs.writeFile(file, JSON.stringify(data), err => {\n        if (err) {\n            console.log(err);\n            return false;\n        } else {\n            return true\n        }\n    })\n}\nasync function hash(password) {\n    try {\n        var hashPassword = await bcrypt.hash(password, saltRounds)\n        return hashPassword.toString()\n    } catch (error) {\n        console.log(error)\n        return \"error\"\n    }\n}\n\nfunction sendMail(reciver, emailSubject, message) {\n    if (emailUsername) {\n        let transporter = nodemailer.createTransport({\n            host: \"smtp.gmail.com\",\n            port: 587,\n            secure: false,\n            requireTLS: true,\n            auth: {\n                user: emailUsername,\n                pass: emailPassword\n            }\n        })\n        let mailOptions = {\n            from: emailUsername,\n            to: reciver,\n            subject: emailSubject,\n            text: message + \" This is an automated message. Please do not respond\"\n        }\n        transporter.sendMail(mailOptions, (error, info) => {\n            if (error) {\n                log(error)\n                return console.log(error)\n            }\n            log(`sent mail to ${reciver}`)\n        })\n    }\n}\n\nfunction log(msg, isErr) { \/\/main logging function\n    var date = new Date()\n    var month = date.getMonth() + 1\n    var firstMinutes = date.getMinutes()\n    var minutes\n    if (firstMinutes < 10) {\n        minutes = \"0\" + firstMinutes\n    } else {\n        minutes = firstMinutes\n    }\n    var fullMsg = \"[\" + date.getDate() + \".\" + month + \".\" + date.getFullYear() + \" @ \" + date.getHours() + \":\" + minutes + \"] \" + msg\n    if (!msg) {\n        log(\"tried to log with no message provided\")\n        return;\n    }\n    if (fs.existsSync(\"data\/logs\/log.log\") && useLogs || fs.existsSync(\"data\/logs\/log.log\") && isErr) {\n        fs.appendFileSync(\"data\/logs\/log.log\", fullMsg + \"\\r\\n\")\n    } else if (useLogs && fs.existsSync(\"data\/logs\") || isErr && fs.existsSync(\"data\/logs\")) {\n        fs.writeFileSync(\"data\/logs\/log.log\", \"[\" + date.getDate() + \".\" + month + \".\" + date.getFullYear() + \" @ \" + date.getHours() + \":\" + minutes + `] Log file created, to disable logging check the index.js file: config section. logging is currently: ${useLogs} \\r\\n`)\n        fs.appendFileSync(\"data\/logs\/log.log\", fullMsg + \"\\r\\n\")\n    } else if (useLogs || isErr) {\n        fs.mkdirSync(\"data\/logs\")\n        fs.writeFileSync(\"data\/logs\/log.log\", \"[\" + date.getDate() + \".\" + month + \".\" + date.getFullYear() + \" @ \" + date.getHours() + \":\" + minutes + `] Log file created, to disable logging check the index.js file: config section. logging is currently: ${useLogs} \\r\\n`)\n        fs.appendFileSync(\"data\/logs\/log.log\", fullMsg + \"\\r\\n\")\n    }\n}"]
	},
	"LoginSystem":{
		"prefix": ["LoginSystem", "LS"],
		"body": "socket.on(\"login\", (username, password, rememberMe) => {\n        var json = jsonRead(\"data\/users.json\")\n        if (json) {\n            var found = false\n            var needConfirm = false\n            json.forEach(user => {\n                if (user.username == username && bcrypt.compareSync(password, user.password) && user.confirmation) {\n                    socket.emit(\"redir\", \"needConfirm.html\")\n                    needConfirm = true\n                } else if (user.username == username && bcrypt.compareSync(password, user.password)) {\n                    var newObject = {\n                        \"username\": username,\n                        \"key\": Math.floor(Math.random() * 100000000000000000000),\n                        \"admin\": user.admin\n                    }\n                    approvedKeys.push(newObject)\n                    found = true\n                    socket.emit(\"passwordCorrect\", newObject.username, newObject.key, rememberMe)\n                }\n            })\n            if (!found && !needConfirm) {\n                socket.emit(\"passwordWrong\")\n            }\n        }\n    })\n    \/\/venter på register requests og legger den nye kontoen inn i databasen hvis brukernavnet ikke allerede eksisterer\n    socket.on(\"register\", (username, nonHashPassword) => {\n        hash(nonHashPassword).then(function (password) {\n            if (password == false) {\n                socket.emit(\"eror\", \"500 internal server error, server could not secure your password and therefore registration was cancelled. ERR:HASHERR\")\n                return false\n            }\n            var json = jsonRead(\"data\/users.json\")\n            var found = false\n            json.forEach(user => {\n                if (user.username == username) {\n                    socket.emit(\"usernameExists\")\n                    found = true\n                }\n            })\n            if (!found) {\n                var newObject = {\n                    \"username\": username,\n                    \"password\": password,\n                    \"admin\": false,\n                    \"confirmation\": {\n                        \"id\": Math.random()\n                    }\n                }\n                json.push(newObject)\n                var status = jsonWrite(\"data\/users.json\", json)\n                if (status == false) {\n                    socket.emit(\"eror\", \"somthing went wrong when saving your username to the database. ERR:DATABASEFAIL\");\n                    return false\n                } else {\n                    socket.emit(\"userCreated\")\n                }\n                sendMail(newObject.username, \"Confirm Email\", `hello ${newObject.username} you can confirm you email by pressing this link: http:\/\/31.45.72.232\/confirm.html?id=${newObject.confirmation.id}`)\n            }\n        })\n    })\n    \/\/sjekker om personer som er på innloggede sider faktisk har logget inn\n    socket.on(\"check\", (username, key, needsAdminPerms) => {\n        var found = false\n        approvedKeys.forEach(approvedKey => {\n            if (approvedKey.username == username && approvedKey.key == key) {\n                if (needsAdminPerms && approvedKey.admin) {\n                    found = true\n                } else if (!needsAdminPerms) {\n                    found = true\n                }\n            }\n        })\n        if (!found) {\n            socket.emit(\"notAllowed\")\n        } else {\n            socket.emit(\"allowed\")\n        }\n    })"
	},
	"DBCreation":{
		 "prefix": ["DBC", "databasecreation", "DBcreation"],
		 "body": "(function () {\n    var allFiles = [\n        [$0]\n    ]\n    var statusSent = false;\n    if (!fs.existsSync(\"data\/\")) {\n        fs.mkdirSync(\"data\/\")\n        console.log(\"\\x1b[33m%s\\x1b[0m\", \"Opretter Database.....\")\n        statusSent = true;\n    }\n    allFiles.forEach(file => {\n        if (!fs.existsSync(`data\/${file[0]}`)) {\n            if (!statusSent) {\n                console.log(\"\\x1b[33m%s\\x1b[0m\", \"Opretter Database.....\")\n                statusSent = true\n            }\n            jsonWrite(`data\/${file[0]}`, JSON.parse(file[1]))\n        }\n    })\n    if (statusSent) {\n        console.log(\"\\x1b[32m%s\\x1b[0m\", \"Database Oprettet!\")\n    }\n})()"
	}
}